# templates/test-job-template.yml
parameters:
  - name: jobName
    type: string
  - name: displayName
    type: string
  - name: testScript
    type: string
  - name: environmentVariables
    type: object
    default: {}

jobs:
  - job: ${{ parameters.jobName }}
    displayName: ${{ parameters.displayName }}
    steps:
      - checkout: self
        persistCredentials: true
        clean: true

      - task: NodeTool@0
        displayName: "Use Node.js"
        inputs:
          versionSpec: "20.x"

      - task: Npm@1
        displayName: "Install dependencies"
        inputs:
          command: "ci"

      # Install dotenv if not already in package.json dependencies
      - task: Npm@1
        displayName: "Install dotenv for environment variables"
        inputs:
          command: "install"
          arguments: "dotenv --save-dev"

      - task: PowerShell@2
        displayName: "Run Tests"
        continueOnError: true
        env:
          CI: "true"
          # Azure Test Plans Integration Variables
          AZURE_DEVOPS_ORG_URL: $(AzureDevOpsOrgUrl)
          AZURE_DEVOPS_TOKEN: $(AzureDevOpsToken)
          AZURE_TEST_PLAN_ID: $(AzureTestPlanId)
          AZURE_PROJECT_NAME: $(AzureProjectName)
          # Merge in any additional environment variables passed via parameters
          ${{ insert }}: ${{ parameters.environmentVariables }}
        inputs:
          targetType: "inline"
          script: |
            npx playwright install chromium
            ${{ parameters.testScript }}

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "**/results.xml"
          testRunTitle: "${{ parameters.displayName }}"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Test Reports"
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: "$(System.DefaultWorkingDirectory)/playwright-report"
          ArtifactName: "${{ parameters.jobName }}-results"

      # Still publish test-results for videos and screenshots
      - task: PublishBuildArtifacts@1
        displayName: "Publish Test Videos/Screenshots"
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: "$(System.DefaultWorkingDirectory)/test-results"
          ArtifactName: "${{ parameters.jobName }}-test-artifacts"

      # NEW: Publish the Azure Test Plans summary report
      - task: PublishBuildArtifacts@1
        displayName: "Publish Test Case Summary"
        condition: succeededOrFailed()
        continueOnError: true
        inputs:
          PathtoPublish: "$(System.DefaultWorkingDirectory)/test-case-summary.md"
          ArtifactName: "${{ parameters.jobName }}-test-case-summary"
